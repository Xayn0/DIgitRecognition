{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da58ff7a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-27T18:08:21.862744Z",
     "iopub.status.busy": "2025-05-27T18:08:21.861616Z",
     "iopub.status.idle": "2025-05-27T18:09:33.399498Z",
     "shell.execute_reply": "2025-05-27T18:09:33.395035Z"
    },
    "papermill": {
     "duration": 71.54894,
     "end_time": "2025-05-27T18:09:33.405205",
     "exception": false,
     "start_time": "2025-05-27T18:08:21.856265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3 1 0 ... 4 1 6]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "Iteration:  0\n",
      "[3 3 3 ... 4 0 4] [5 2 0 ... 9 1 1]\n",
      "0.12990243902439025\n",
      "Iteration:  10\n",
      "[6 3 3 ... 0 6 7] [5 2 0 ... 9 1 1]\n",
      "0.19853658536585367\n",
      "Iteration:  20\n",
      "[2 3 3 ... 0 6 8] [5 2 0 ... 9 1 1]\n",
      "0.2665609756097561\n",
      "Iteration:  30\n",
      "[2 3 3 ... 0 6 3] [5 2 0 ... 9 1 1]\n",
      "0.3120731707317073\n",
      "Iteration:  40\n",
      "[2 3 8 ... 0 6 3] [5 2 0 ... 9 1 1]\n",
      "0.34182926829268295\n",
      "Iteration:  50\n",
      "[2 3 4 ... 0 3 3] [5 2 0 ... 9 1 1]\n",
      "0.3708048780487805\n",
      "Iteration:  60\n",
      "[2 3 6 ... 0 3 3] [5 2 0 ... 9 1 1]\n",
      "0.3971707317073171\n",
      "Iteration:  70\n",
      "[2 3 6 ... 0 3 8] [5 2 0 ... 9 1 1]\n",
      "0.42565853658536584\n",
      "Iteration:  80\n",
      "[3 3 6 ... 0 3 8] [5 2 0 ... 9 1 1]\n",
      "0.48553658536585365\n",
      "Iteration:  90\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.548219512195122\n",
      "Iteration:  100\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.5797317073170731\n",
      "Iteration:  110\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6008780487804878\n",
      "Iteration:  120\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6180975609756097\n",
      "Iteration:  130\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6346829268292683\n",
      "Iteration:  140\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6484634146341464\n",
      "Iteration:  150\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6610975609756098\n",
      "Iteration:  160\n",
      "[3 8 6 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.673219512195122\n",
      "Iteration:  170\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6839512195121952\n",
      "Iteration:  180\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.6937560975609756\n",
      "Iteration:  190\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7022682926829268\n",
      "Iteration:  200\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7104878048780487\n",
      "Iteration:  210\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.718609756097561\n",
      "Iteration:  220\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7257560975609756\n",
      "Iteration:  230\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7328536585365854\n",
      "Iteration:  240\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7397317073170732\n",
      "Iteration:  250\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7461951219512195\n",
      "Iteration:  260\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7516585365853659\n",
      "Iteration:  270\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.758219512195122\n",
      "Iteration:  280\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7634878048780488\n",
      "Iteration:  290\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7695609756097561\n",
      "Iteration:  300\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7740487804878049\n",
      "Iteration:  310\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7783414634146342\n",
      "Iteration:  320\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7830731707317073\n",
      "Iteration:  330\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7871951219512195\n",
      "Iteration:  340\n",
      "[3 8 0 ... 0 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7911463414634147\n",
      "Iteration:  350\n",
      "[3 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.794609756097561\n",
      "Iteration:  360\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.7978536585365854\n",
      "Iteration:  370\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8015609756097561\n",
      "Iteration:  380\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8050975609756098\n",
      "Iteration:  390\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8079756097560976\n",
      "Iteration:  400\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8105609756097562\n",
      "Iteration:  410\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8127317073170731\n",
      "Iteration:  420\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8156829268292682\n",
      "Iteration:  430\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8182439024390243\n",
      "Iteration:  440\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.820560975609756\n",
      "Iteration:  450\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8227073170731707\n",
      "Iteration:  460\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8249756097560975\n",
      "Iteration:  470\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8269024390243902\n",
      "Iteration:  480\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.8284878048780487\n",
      "Iteration:  490\n",
      "[5 8 0 ... 9 3 1] [5 2 0 ... 9 1 1]\n",
      "0.83\n",
      "Prediction:  [5]\n",
      "Label:  5\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [8]\n",
      "Label:  2\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [0]\n",
      "Label:  0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [3]\n",
      "Label:  1\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 1 0 0 2 8 4 1 2 6 2 4 0 2 8 0 4 9 8 9 4 6 1 0 9 8 9 8 6 0 1 8 7 0 3 6 0\n",
      " 8 1 7 8 7 2 8 1 3 8 4 5 8 7 3 8 4 2 4 1 1 1 0 0 5 0 1 9 9 9 9 3 6 2 8 1 7\n",
      " 7 5 7 7 9 1 6 6 5 4 0 1 7 2 6 6 8 6 0 5 6 9 7 9 1 1 9 6 0 0 7 6 5 8 4 2 8\n",
      " 3 3 5 1 0 1 0 3 1 3 7 2 3 8 4 1 7 8 0 3 2 6 1 7 8 1 4 3 1 4 2 5 9 4 4 6 9\n",
      " 4 9 0 2 7 1 2 2 1 0 8 6 3 4 4 0 1 0 4 7 7 6 8 3 4 4 9 4 5 5 4 0 8 1 2 3 2\n",
      " 7 5 1 0 0 8 4 8 3 1 6 1 7 2 4 6 6 9 4 4 8 3 1 5 2 4 4 6 8 3 6 9 9 8 1 1 9\n",
      " 1 9 7 7 9 5 4 5 9 9 4 8 0 0 0 9 1 1 4 5 4 0 8 1 3 5 1 3 3 9 7 9 1 3 1 8 9\n",
      " 6 9 5 2 3 3 2 1 0 9 1 6 1 3 8 9 8 9 3 9 0 1 8 9 7 9 3 6 5 7 9 3 4 6 2 7 3\n",
      " 1 6 7 0 6 4 6 5 8 3 0 4 2 6 4 1 4 7 5 8 2 7 1 5 8 6 8 7 0 1 9 9 8 2 3 6 0\n",
      " 9 7 1 2 4 4 3 4 8 3 1 1 4 3 2 1 9 5 0 0 6 7 9 6 5 1 5 3 0 4 3 5 2 3 1 2 3\n",
      " 7 0 1 2 0 6 0 2 8 2 8 7 7 4 3 6 9 1 2 7 0 7 6 6 8 9 1 6 8 8 7 1 3 4 2 4 8\n",
      " 9 4 8 4 6 3 1 1 8 1 8 3 7 7 4 3 0 6 6 0 7 4 8 5 5 0 2 1 0 3 5 2 4 4 3 7 1\n",
      " 3 4 4 6 1 4 9 3 5 7 7 4 8 5 4 2 0 7 0 9 5 1 9 3 2 8 9 7 1 3 4 6 0 2 5 0 1\n",
      " 0 1 2 2 9 5 1 6 1 1 6 3 0 7 4 1 8 4 3 4 1 1 2 6 7 5 1 2 6 5 3 1 6 8 9 5 7\n",
      " 2 4 2 8 7 2 8 7 3 8 9 5 6 3 8 0 1 7 5 7 6 0 5 2 2 5 0 9 3 1 8 2 5 2 9 2 6\n",
      " 7 8 4 4 2 8 4 5 8 1 4 6 7 0 2 2 8 4 7 9 0 0 0 5 7 0 3 3 0 1 7 1 4 3 1 0 9\n",
      " 9 1 8 7 2 7 2 1 8 2 0 0 7 9 9 5 4 2 6 8 8 3 3 4 1 0 4 2 7 6 3 9 1 7 8 3 8\n",
      " 6 2 0 1 0 7 2 6 4 3 2 0 9 3 4 2 1 3 2 6 2 2 3 9 0 5 9 3 0 9 5 7 1 6 3 9 5\n",
      " 2 1 3 3 3 5 5 2 5 8 2 0 3 1 4 8 6 4 9 1 4 3 1 0 3 7 7 6 6 1 9 3 3 0 9 9 4\n",
      " 1 4 5 8 4 4 7 2 0 3 9 4 1 1 0 7 1 8 9 9 6 1 4 5 6 7 3 2 3 5 1 4 9 8 1 8 5\n",
      " 1 1 2 7 9 7 8 7 7 2 7 1 8 3 8 3 1 7 7 8 0 7 9 2 7 9 5 0 1 7 1 8 1 3 1 8 9\n",
      " 6 9 6 3 8 6 6 3 3 5 0 8 9 3 6 7 2 2 2 7 7 1 8 7 9 8 2 3 4 8 0 9 7 9 9 4 6\n",
      " 5 9 3 2 0 1 8 6 0 1 4 0 4 4 4 5 0 4 6 8 2 9 4 6 6 1 8 8 4 5 0 3 9 6 0 9 2\n",
      " 2 3 8 8 7 7 9 1 5 0 3 6 5 2 8 9 0 5 6 4 1 7 9 9 4 0 8 1 3 3 6 1 4 8 6 6 1\n",
      " 6 2 0 7 4 9 2 4 9 5 4 5 0 7 2 8 4 1 3 5 8 3 6 3 1 6 7 6 9 5 6 0 3 3 1 6 9\n",
      " 9 4 0 1 2 0 0 7 1 8 1 2 7 2 4 6 2 4 2 0 9 0 6 1 0 3 1 0 4 9 7 3 0 1 6 4 1\n",
      " 0 3 0 8 7 3 1 6 0 7 2 2 6 5 1 5 7 0 5 9 3 5 0 7 2 9 0 0 3 7 5 8 0 0 5 1 1\n",
      " 6] [3 1 0 0 0 8 4 8 2 6 2 4 0 2 2 0 4 9 8 9 4 6 1 0 9 8 7 8 6 0 1 2 7 7 3 6 0\n",
      " 7 1 7 8 7 2 5 1 3 8 4 5 8 7 3 8 4 2 7 1 1 1 0 0 8 0 1 9 9 9 7 3 6 2 8 1 7\n",
      " 7 3 7 7 9 1 6 5 5 0 0 1 7 2 6 2 2 6 0 5 6 9 7 4 1 7 4 6 0 0 9 6 5 8 4 6 8\n",
      " 5 3 5 1 0 1 4 3 1 9 7 2 3 8 4 1 7 8 0 8 2 6 1 7 8 8 4 3 1 4 2 5 9 4 4 6 9\n",
      " 8 9 0 2 7 1 2 2 1 0 8 6 3 4 4 0 1 0 4 7 7 6 8 3 4 4 9 4 8 5 4 0 8 1 2 3 5\n",
      " 7 9 1 0 0 1 4 4 8 1 0 8 7 2 4 6 6 9 4 4 8 3 1 5 2 4 4 6 2 5 6 7 9 7 1 1 2\n",
      " 3 3 7 7 9 5 4 5 4 9 4 5 0 0 0 9 1 1 9 5 8 0 8 1 9 5 1 3 3 8 7 9 1 3 1 8 9\n",
      " 6 9 5 2 3 3 2 6 0 9 1 6 1 3 8 4 8 9 3 9 0 1 8 9 7 4 3 6 5 7 9 3 4 6 2 7 8\n",
      " 1 6 7 0 6 4 6 5 8 3 0 4 2 6 6 1 4 7 5 2 2 7 1 5 8 6 8 7 0 1 9 9 8 2 3 6 0\n",
      " 4 7 1 2 4 4 3 4 8 3 1 1 4 3 2 1 9 5 0 0 0 7 9 5 5 1 6 5 0 4 3 5 7 3 1 2 3\n",
      " 7 0 1 2 0 6 0 2 8 2 8 7 7 9 3 8 9 1 2 7 0 7 4 6 8 9 1 6 8 4 9 1 3 4 2 4 8\n",
      " 9 4 8 4 6 3 1 1 8 1 8 3 7 7 4 3 0 2 6 0 7 4 2 5 5 0 2 1 0 3 5 2 4 4 3 7 4\n",
      " 3 4 4 6 1 0 9 3 3 7 7 4 8 3 4 2 5 9 0 4 5 1 9 3 2 9 8 7 1 2 9 5 0 2 5 0 1\n",
      " 0 1 2 2 8 5 1 6 1 1 6 3 0 7 4 1 8 5 3 9 1 1 2 6 7 5 1 2 6 5 5 1 6 5 9 3 7\n",
      " 2 4 2 8 7 2 3 7 3 8 4 5 6 3 5 0 1 7 3 7 4 0 5 2 2 5 0 9 3 1 8 2 5 2 4 2 6\n",
      " 9 8 4 4 2 2 4 3 2 4 4 6 2 0 2 2 5 9 7 9 0 0 0 3 7 0 3 3 0 7 3 1 4 3 1 0 9\n",
      " 9 1 8 7 0 7 2 1 3 2 0 0 7 9 9 5 2 2 6 2 8 3 2 4 2 5 9 2 7 6 3 9 1 7 8 3 8\n",
      " 5 2 5 8 0 7 2 6 9 2 2 0 9 3 9 2 1 3 2 6 4 2 5 8 0 5 9 3 0 7 3 9 1 6 1 9 5\n",
      " 2 1 3 3 8 5 5 2 3 8 2 4 3 1 4 8 6 4 9 1 4 3 1 0 3 7 7 6 6 1 7 3 3 0 9 7 5\n",
      " 1 4 8 8 4 4 7 2 0 3 9 5 1 1 0 7 1 8 9 3 6 1 9 5 6 7 2 2 3 8 1 2 7 8 1 8 9\n",
      " 1 1 2 7 9 7 8 7 7 2 7 1 8 3 8 5 1 7 7 8 2 7 9 2 7 9 5 0 1 7 1 8 1 5 1 8 4\n",
      " 6 3 6 3 8 6 6 3 5 5 0 8 9 3 6 7 2 2 3 9 7 1 2 7 9 8 8 3 4 5 0 9 7 9 9 4 6\n",
      " 3 9 3 2 0 1 1 6 0 1 4 0 9 4 4 5 0 4 3 8 2 9 4 6 6 1 8 8 7 5 1 3 4 6 0 9 2\n",
      " 2 5 5 8 7 9 9 1 5 0 9 6 3 6 8 9 0 5 6 4 1 7 9 7 4 0 8 1 3 3 6 1 3 8 6 6 9\n",
      " 6 2 0 7 4 9 2 4 4 5 2 5 0 7 2 8 4 1 3 5 8 3 6 3 4 5 2 6 9 5 6 0 3 5 1 6 7\n",
      " 9 4 6 1 2 0 0 7 1 8 1 2 7 2 9 6 2 4 2 0 3 0 6 1 0 3 4 0 4 4 7 3 0 1 6 4 1\n",
      " 0 3 0 8 7 3 1 6 0 7 5 2 6 5 1 6 7 0 5 4 3 5 0 7 2 9 0 0 3 7 5 8 0 0 5 4 1\n",
      " 6]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.819"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')#loaded the data with a pandas function\n",
    "data = np.array(data)# made the data a numpy array (to use numpy functions on it)\n",
    "m, n = data.shape# variables to keep number of examples (m) and features per example(n)\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T#1000 examples for dev, transposed so we don't take the transpose when multiplying\n",
    "Y_dev = data_dev[0]# labels vector\n",
    "X_dev = data_dev[1:n]# features vector\n",
    "X_dev = X_dev / 255. # normalize the features\n",
    "\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape\n",
    "print(data_dev[0:2])\n",
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2\n",
    "\n",
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2\n",
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2\n",
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)\n",
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()\n",
    "test_prediction(0, W1, b1, W2, b2)\n",
    "test_prediction(1, W1, b1, W2, b2)\n",
    "test_prediction(2, W1, b1, W2, b2)\n",
    "test_prediction(3, W1, b1, W2, b2)\n",
    "dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\n",
    "get_accuracy(dev_predictions, Y_dev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97e58244",
   "metadata": {
    "papermill": {
     "duration": 0.011607,
     "end_time": "2025-05-27T18:09:33.428934",
     "exception": false,
     "start_time": "2025-05-27T18:09:33.417327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30673,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 76.262461,
   "end_time": "2025-05-27T18:09:34.269240",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-27T18:08:18.006779",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
