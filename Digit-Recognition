{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65032a6b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-27T18:13:41.175124Z",
     "iopub.status.busy": "2025-05-27T18:13:41.174810Z",
     "iopub.status.idle": "2025-05-27T18:14:44.599365Z",
     "shell.execute_reply": "2025-05-27T18:14:44.597357Z"
    },
    "papermill": {
     "duration": 63.432841,
     "end_time": "2025-05-27T18:14:44.603830",
     "exception": false,
     "start_time": "2025-05-27T18:13:41.170989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3 0 1 ... 0 8 8]\n",
      " [0 0 0 ... 0 0 0]]\n",
      "Iteration:  0\n",
      "[7 5 0 ... 7 8 5] [5 2 9 ... 3 4 2]\n",
      "0.082\n",
      "Iteration:  10\n",
      "[0 4 7 ... 9 8 5] [5 2 9 ... 3 4 2]\n",
      "0.17039024390243904\n",
      "Iteration:  20\n",
      "[0 4 7 ... 9 4 2] [5 2 9 ... 3 4 2]\n",
      "0.30078048780487804\n",
      "Iteration:  30\n",
      "[0 4 0 ... 9 4 2] [5 2 9 ... 3 4 2]\n",
      "0.413390243902439\n",
      "Iteration:  40\n",
      "[0 8 7 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.49590243902439024\n",
      "Iteration:  50\n",
      "[0 2 7 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.5540243902439025\n",
      "Iteration:  60\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.5977073170731707\n",
      "Iteration:  70\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.6339268292682927\n",
      "Iteration:  80\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.6616585365853659\n",
      "Iteration:  90\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.685\n",
      "Iteration:  100\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7027560975609756\n",
      "Iteration:  110\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7183170731707317\n",
      "Iteration:  120\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7312926829268293\n",
      "Iteration:  130\n",
      "[0 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7423170731707317\n",
      "Iteration:  140\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7529512195121951\n",
      "Iteration:  150\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7617560975609756\n",
      "Iteration:  160\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.769219512195122\n",
      "Iteration:  170\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7765853658536586\n",
      "Iteration:  180\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7833414634146342\n",
      "Iteration:  190\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7892926829268293\n",
      "Iteration:  200\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.7955609756097561\n",
      "Iteration:  210\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8004878048780488\n",
      "Iteration:  220\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8057560975609757\n",
      "Iteration:  230\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8098536585365854\n",
      "Iteration:  240\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8134390243902438\n",
      "Iteration:  250\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8170975609756097\n",
      "Iteration:  260\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8199512195121951\n",
      "Iteration:  270\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8230731707317073\n",
      "Iteration:  280\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8261219512195122\n",
      "Iteration:  290\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8292682926829268\n",
      "Iteration:  300\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8316829268292683\n",
      "Iteration:  310\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8334878048780487\n",
      "Iteration:  320\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8355365853658536\n",
      "Iteration:  330\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8376341463414634\n",
      "Iteration:  340\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8396585365853658\n",
      "Iteration:  350\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8416341463414634\n",
      "Iteration:  360\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8433170731707317\n",
      "Iteration:  370\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8452682926829268\n",
      "Iteration:  380\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8466829268292683\n",
      "Iteration:  390\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8481219512195122\n",
      "Iteration:  400\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8495121951219512\n",
      "Iteration:  410\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8507317073170731\n",
      "Iteration:  420\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8519756097560975\n",
      "Iteration:  430\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8534634146341463\n",
      "Iteration:  440\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8544390243902439\n",
      "Iteration:  450\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8559512195121951\n",
      "Iteration:  460\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8570975609756097\n",
      "Iteration:  470\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8581219512195122\n",
      "Iteration:  480\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8592195121951219\n",
      "Iteration:  490\n",
      "[5 2 9 ... 3 4 2] [5 2 9 ... 3 4 2]\n",
      "0.8602926829268293\n",
      "Prediction:  [5]\n",
      "Label:  5\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [2]\n",
      "Label:  2\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [9]\n",
      "Label:  9\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [4]\n",
      "Label:  2\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 0 1 6 8 6 2 0 6 2 8 1 1 0 7 0 7 9 4 6 3 2 1 2 2 8 0 4 5 0 6 0 1 9 6 8 8\n",
      " 0 0 7 7 5 0 6 5 4 0 0 4 3 7 0 2 8 5 2 8 3 3 5 1 1 4 6 4 0 0 2 3 5 2 4 7 7\n",
      " 3 0 9 0 2 8 0 4 4 7 1 2 9 8 0 8 1 0 4 4 7 6 3 7 3 3 4 7 4 7 8 7 0 7 3 8 4\n",
      " 4 1 1 9 7 1 3 2 2 4 2 8 4 5 3 2 4 4 9 7 0 6 3 1 0 2 3 7 9 1 8 2 8 4 5 1 1\n",
      " 6 5 8 9 1 3 9 1 2 2 3 3 1 2 4 0 0 6 3 0 0 2 0 8 1 2 8 8 0 4 8 8 1 8 4 3 8\n",
      " 4 4 4 8 2 9 8 1 0 4 8 6 5 3 0 4 2 0 9 4 1 4 1 4 1 5 2 9 0 1 2 6 8 0 1 2 3\n",
      " 3 0 1 1 3 9 8 9 5 8 4 1 5 7 0 5 6 9 7 4 8 7 4 8 6 0 5 2 6 8 4 9 8 6 6 1 3\n",
      " 0 7 9 3 1 2 2 0 8 0 9 8 0 2 5 8 1 2 1 3 0 9 1 3 2 6 9 1 7 9 3 8 9 1 8 7 1\n",
      " 1 9 0 1 5 8 6 6 6 8 9 7 1 0 5 4 6 6 4 7 1 1 4 6 9 9 6 3 1 8 8 8 4 3 7 4 6\n",
      " 1 8 5 9 7 4 6 2 0 6 4 8 6 9 6 4 2 9 8 8 1 2 1 6 0 7 1 0 8 8 1 8 8 7 7 9 3\n",
      " 8 5 4 8 1 4 6 4 1 9 3 4 2 7 6 1 1 8 1 4 6 1 8 0 1 6 1 9 9 0 9 6 1 6 8 9 3\n",
      " 1 0 0 0 5 1 5 4 7 8 7 0 3 2 6 5 0 8 5 6 4 0 9 8 0 8 4 2 0 3 3 6 8 3 4 2 2\n",
      " 7 1 6 4 1 5 6 6 4 4 4 5 6 8 1 5 4 8 1 1 7 6 5 9 9 2 1 3 7 4 9 4 6 0 7 1 0\n",
      " 1 1 0 1 8 8 9 1 0 7 6 4 8 2 6 6 9 4 3 5 0 7 1 5 7 3 1 1 4 9 7 8 5 8 4 5 2\n",
      " 1 3 1 4 0 3 4 1 9 7 7 0 4 1 7 9 9 6 3 8 9 7 1 0 7 7 3 8 7 9 0 7 1 8 4 4 1\n",
      " 6 7 6 3 8 5 2 6 7 1 8 3 2 9 0 5 6 4 2 4 2 7 6 5 6 7 4 1 9 9 0 4 8 1 5 5 5\n",
      " 1 8 7 7 7 3 8 1 1 1 6 2 1 5 1 1 2 0 9 9 1 7 8 6 0 2 8 5 1 7 1 2 0 7 1 9 8\n",
      " 0 7 3 5 8 4 6 4 3 5 7 2 7 6 3 7 7 9 2 6 6 3 5 5 1 4 2 2 7 3 2 8 8 3 7 5 6\n",
      " 4 9 6 7 9 8 8 3 4 9 1 0 8 4 9 3 7 0 6 9 4 4 8 3 7 5 6 8 5 4 1 8 4 2 6 1 0\n",
      " 1 3 7 3 0 1 0 5 0 1 0 2 3 8 6 8 5 9 4 3 1 8 3 1 0 5 8 4 2 9 2 2 3 0 7 8 5\n",
      " 7 1 7 1 2 2 0 5 5 5 2 2 0 6 6 5 4 9 9 2 0 5 1 5 5 7 7 7 0 0 7 4 0 8 3 7 1\n",
      " 7 0 3 7 4 5 9 2 3 8 5 8 3 3 7 7 6 0 4 5 9 9 7 5 1 0 1 0 8 5 9 3 7 3 4 5 1\n",
      " 8 3 6 0 3 3 5 2 7 3 0 9 3 5 5 4 9 7 6 2 2 2 2 8 1 3 9 7 7 9 4 1 3 0 5 2 8\n",
      " 0 1 3 1 8 9 6 0 5 7 9 5 8 1 7 7 3 0 6 9 0 8 6 7 2 0 6 9 7 0 1 1 2 9 0 1 0\n",
      " 2 8 6 1 7 5 6 4 8 6 3 8 6 3 2 3 6 7 8 3 3 9 0 9 9 9 0 8 8 8 0 5 4 4 8 0 4\n",
      " 2 8 3 1 3 8 8 0 8 0 9 1 2 6 8 0 6 1 1 8 3 8 6 7 3 0 5 2 8 7 9 6 3 7 2 5 1\n",
      " 6 3 7 7 6 1 9 0 8 1 8 3 2 4 7 7 7 3 2 9 0 3 2 5 4 9 9 9 5 7 3 5 4 9 7 0 8\n",
      " 2] [3 0 1 6 8 2 2 0 6 2 8 1 1 0 7 9 7 9 4 6 3 2 1 8 2 8 0 4 5 0 6 0 8 7 6 8 8\n",
      " 0 0 7 7 8 0 6 9 4 0 0 4 7 9 0 2 8 8 2 8 0 3 5 1 1 9 6 4 0 0 2 3 5 2 4 2 7\n",
      " 3 5 9 0 2 8 5 4 4 1 1 2 9 8 0 8 1 0 4 4 7 6 3 7 3 3 4 7 4 7 4 9 0 7 3 8 4\n",
      " 4 1 1 4 7 1 3 2 2 4 2 8 4 5 3 2 4 4 9 7 0 6 3 1 0 2 3 7 9 1 8 2 3 4 5 1 1\n",
      " 6 9 8 9 1 8 9 1 2 2 3 3 1 2 4 0 0 6 3 0 0 4 0 8 1 2 2 8 0 9 8 4 1 8 4 3 8\n",
      " 4 4 0 8 2 9 5 5 0 4 8 6 5 3 0 4 2 0 9 4 1 4 1 4 1 5 3 9 0 1 2 6 8 0 1 2 3\n",
      " 3 0 1 1 3 9 8 3 5 8 4 1 5 7 0 5 6 9 7 4 8 7 4 8 6 0 5 3 6 8 4 9 8 6 6 1 3\n",
      " 0 7 9 5 1 2 2 0 8 0 9 8 0 2 5 8 1 2 1 3 0 1 1 3 2 2 9 1 7 9 3 8 9 1 8 7 1\n",
      " 1 4 0 1 0 8 0 6 6 8 9 7 7 0 0 4 6 6 4 7 1 1 4 6 9 9 6 3 1 8 8 8 4 8 7 4 6\n",
      " 1 8 5 9 7 4 6 2 0 6 4 8 6 7 6 4 2 9 8 8 1 2 8 6 0 7 1 8 1 8 1 8 5 7 7 9 3\n",
      " 8 0 4 8 1 4 5 4 1 9 3 4 2 7 6 1 1 8 1 8 6 1 8 0 1 5 1 9 9 0 9 6 1 6 8 7 3\n",
      " 1 0 0 0 5 1 8 4 7 8 7 0 3 2 6 5 0 5 5 6 4 8 9 8 0 3 6 2 0 3 8 6 0 3 4 2 2\n",
      " 7 1 6 4 1 5 6 6 4 4 7 5 6 8 1 5 4 8 1 1 7 6 5 9 9 2 1 3 7 4 7 9 6 0 7 1 0\n",
      " 1 1 0 1 8 8 9 1 0 7 6 4 8 2 6 6 5 4 3 5 0 9 1 5 7 8 1 1 4 9 7 8 5 5 4 5 2\n",
      " 1 3 1 4 0 3 4 1 9 7 7 0 0 1 7 9 9 6 3 8 9 7 1 0 7 7 3 8 7 9 0 7 1 5 2 4 1\n",
      " 6 7 8 3 8 5 2 4 7 1 8 3 1 9 0 5 6 9 2 4 7 7 6 5 6 7 4 1 5 9 0 2 8 1 5 0 5\n",
      " 1 8 7 7 7 5 8 1 1 1 6 2 1 5 1 1 2 0 9 7 1 7 8 6 0 2 3 5 1 7 1 2 0 1 1 9 6\n",
      " 0 7 8 3 8 4 6 6 3 5 7 2 7 6 3 7 7 9 2 6 6 3 5 9 1 4 2 7 7 3 2 2 4 3 7 5 6\n",
      " 4 9 6 7 9 8 5 3 4 7 1 0 5 4 9 3 7 0 2 9 4 4 8 3 7 5 6 8 5 4 1 8 4 2 6 1 0\n",
      " 1 3 7 3 0 1 0 5 0 1 0 2 3 8 6 8 5 9 4 3 1 8 3 1 0 5 8 4 2 9 3 2 3 0 7 5 5\n",
      " 7 1 7 1 2 2 0 8 5 5 2 2 0 6 6 5 4 2 9 3 0 5 1 5 5 7 7 7 0 0 8 4 5 8 3 7 1\n",
      " 9 0 3 7 9 5 9 2 8 3 5 8 3 3 7 7 6 0 4 5 9 9 7 5 1 5 1 0 8 5 9 8 7 3 4 0 1\n",
      " 8 3 6 0 3 3 5 2 7 3 0 9 5 5 5 4 9 7 6 2 2 2 2 8 1 3 9 7 7 3 4 1 3 0 9 2 8\n",
      " 0 1 2 1 8 9 6 0 5 7 9 5 8 1 7 7 3 0 6 9 0 8 6 7 2 0 6 5 7 0 1 1 8 9 0 1 9\n",
      " 2 8 6 1 7 5 6 5 8 6 3 8 6 3 2 3 8 7 8 3 3 9 0 9 9 9 0 8 2 8 0 5 4 4 8 0 6\n",
      " 2 8 3 1 5 8 5 0 8 0 9 1 2 6 8 0 6 1 1 2 3 8 6 7 3 0 5 2 8 7 9 6 3 7 2 5 1\n",
      " 6 3 7 7 6 1 9 0 8 1 8 8 2 4 7 7 7 3 2 9 0 3 2 5 6 9 9 9 5 7 3 5 4 9 7 0 8\n",
      " 8]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.877"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')#loaded the data with a pandas function\n",
    "data = np.array(data)# made the data a numpy array (to use numpy functions on it)\n",
    "m, n = data.shape# variables to keep number of examples (m) and features per example(n)\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T#1000 examples for dev, transposed so we don't take the transpose when multiplying\n",
    "Y_dev = data_dev[0]# labels vector\n",
    "X_dev = data_dev[1:n]# features vector\n",
    "X_dev = X_dev / 255. # normalize the features\n",
    "\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape\n",
    "print(data_dev[0:2])\n",
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2\n",
    "\n",
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2\n",
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2\n",
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)\n",
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()\n",
    "test_prediction(0, W1, b1, W2, b2)\n",
    "test_prediction(1, W1, b1, W2, b2)\n",
    "test_prediction(2, W1, b1, W2, b2)\n",
    "test_prediction(3, W1, b1, W2, b2)\n",
    "dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\n",
    "get_accuracy(dev_predictions, Y_dev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2680451",
   "metadata": {
    "papermill": {
     "duration": 0.01478,
     "end_time": "2025-05-27T18:14:44.634333",
     "exception": false,
     "start_time": "2025-05-27T18:14:44.619553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30673,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 67.077378,
   "end_time": "2025-05-27T18:14:45.174621",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-27T18:13:38.097243",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
